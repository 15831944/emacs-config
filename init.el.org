#+Title: My emacs config
* Prolegomena
There are things I like and things I don't like about [[https://github.com/bbatsov/prelude][Prelude]]. The
things I like, I really, really like. I wabt to reimplement them all
with Wiegley's [[https://github.com/jwiegley/use-package][use-package]] gizmo.
* Install packages
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (setq package-user-dir
	(expand-file-name "elpa" (expand-file-name "~/.emacs.d")))
  (package-initialize)

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+end_src
Not that I know what all these do, but they were in Prelude's list of
packages. I'll figure it out.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defvar my/packages
    '(ace-window
      avy
      anzu
      anaconda-mode
      beacon
      browse-kill-ring
      dash
      discover-my-major
      diff-hl
      diminish
      easy-kill
      epl
      expand-region
      flycheck
      gist
      git-timemachine
      gitconfig-mode
      gitignore-mode
      ;; god-mode
      ;; grizzl
      ;; guru-mode
      helm
      helm-proc
      helm-projectile
      imenu-anywhere
      irony
      ov
      projectile
      magit
      move-text
      operate-on-number
      powerline
      sicp
      ;; smart-mode-line
      smartparens
      ;; smartrep
      undo-tree
      use-package
      volatile-highlights
      which-key
      zenburn-theme
      zop-to-char)
    "A list of packages to ensure are installed at launch.")
#+end_src
Elisp is so cool.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(mapc #'(lambda (package) (unless (package-installed-p package) (package-install package))) my/packages)
#+end_src

* Code
** General
I need to learn to make this not stomp on eldoc like it does sometimes.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck
  :config (global-flycheck-mode 1))
#+end_src
The more the merrier. I eventually want it to be a little less than
global. It's generally no help in eshell, jabber, or ERC.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; (defvar company-backends)
  (use-package company
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (use-package company-irony :ensure t :defer t)
    (setq company-idle-delay              0
	  company-minimum-prefix-length   2
	  company-show-numbers            t
	  company-tooltip-limit           20
	  company-dabbrev-downcase        nil
	  company-tooltip-flip-when-above t
	  company-backends                '((company-anaconda
                                             company-bbdb
                                             company-elisp
                                             company-gtags
                                             company-irony))))

#+end_src
This is always helpful.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package smartparens
    :config (smartparens-global-mode 1)
    (sp-use-paredit-bindings))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (whitespace-mode 1)
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face tabs empty trailing lines-tail))
#+end_src
** C/C++
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package irony
  :ensure t
  :defer t
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  :config
  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+end_src

** Python
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package anaconda-mode
  :ensure t
  :commands anaconda-mode
  :diminish anaconda-mode
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'eldoc-mode)))

#+end_src

** Revision control
*** Magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package magit
  :bind (("C-x g" . magit-status)
	 ("C-x M-g" . magit-dispatch-popup)))
#+end_src
* Helm
I dig helm. I don't care much for ido.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay                       0.0
          helm-input-idle-delay                 0.01
          helm-yas-display-key-on-candidate     t
          helm-quick-update                     t
          helm-M-x-requires-pattern             nil
          helm-ff-skip-boring-files             t
          helm-split-window-in-side-p           t
          helm-buffers-fuzzy-matching           t
          helm-move-to-line-cycle-in-source     t
          helm-ff-search-library-in-sexp        t
          helm-ff-file-name-history-use-recentf t)
    (helm-mode))
  :bind (("M-x"     . helm-M-x)
	 ("C-x C-m" . helm-M-x)
	 ("M-y"     . helm-show-kill-ring)
	 ("C-x b"   . helm-mini)
	 ("C-x C-f" . helm-find-files)
	 ("C-h f"   . helm-apropos)
	 ("C-h r"   . helm-info-emacs)
	 ("C-h C-l" . helm-locate-library)
	 :map helm-command-map
	 ("o"       . helm-occur)
	 ("g"       . helm-do-grep)
	 ("C-c w"   . helm-wikipedia-suggest)
	 ("SPC"     . helm-all-mark-rings)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;; (use-package helm-projectile)
#+end_src
* Org Mode
I like the bleeding edge. Heck, I compiled my emacs from git :-)
[GNU Emacs 25.0.93.2 (x86_64-unknown-linux-gnu, GTK+ Version 3.16.7) of 2016-04-28]
On org-agenda-files, the documentation says:
#+begin_quote
If the value of the variable is not a list but a single file name, then
the list of agenda files is actually stored and maintained in that file, one
agenda file per line.  In this file paths can be given relative to
‘org-directory’.  Tilde expansion and environment variable substitution
are also made.
#+end_quote
Maybe I'll do that sometime.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org
    :load-path "~/git/org-mode/lisp"
    :bind (("C-c a"   . org-agenda)
	   ("C-c C-w" . org-refile))
    :config
    (progn
      (setq org-agenda-files
	(delq nil
              (mapcar (lambda (x) (and (file-exists-p x) x))
		      (directory-files
		       (expand-file-name "~/Dropbox/org/agenda/") t org-agenda-file-regexp))))))
#+end_src

#+RESULTS:
: t

* Powerline
[[https://ogbe.net/][Dennis Ogbe]] has the [[https://ogbe.net/emacsconfig.html#orgheadline24][coolest]] mode-line I've ever seen. So I cribbed his
code. Unfortunately, for me, it gets super fat on some frames. That's
just unacceptible. :-(
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package powerline
  :config
  (powerline-default-theme)
;; (if (display-graphic-p)
;;     (progn
;;       (setq powerline-default-separator 'contour)
;;       (setq powerline-height 25))
;;   (setq powerline-default-separator-dir '(right . left)))

;; ;; first reset the faces that already exist
;; (set-face-attribute 'mode-line nil
;;                     :foreground (face-attribute 'default :foreground)
;;                     :family "Liberation Sans"
;;                     :weight 'bold
;;                     :background (face-attribute 'fringe :background))
;; (set-face-attribute 'mode-line-inactive nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :background (face-attribute 'fringe :background)
;;                     :family "Liberation Sans"
;;                     :weight 'bold
;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background)))
;; (set-face-attribute 'powerline-active1 nil
;;                     :background "gray30")
;; (set-face-attribute 'powerline-inactive1 nil
;;                     :background (face-attribute 'default :background)
;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background)))

;; ;; these next faces are for the status indicator
;; ;; read-only buffer
;; (make-face 'mode-line-read-only-face)
;; (make-face 'mode-line-read-only-inactive-face)
;; (set-face-attribute 'mode-line-read-only-face nil
;;                     :foreground (face-attribute 'default :foreground)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-read-only-inactive-face nil
;;                     :foreground (face-attribute 'default :foreground)
;;                     :inherit 'mode-line-inactive)

;; ;; modified buffer
;; (make-face 'mode-line-modified-face)
;; (make-face 'mode-line-modified-inactive-face)
;; (set-face-attribute 'mode-line-modified-face nil
;;                     :foreground (face-attribute 'default :background)
;;                     :background "#e5786d"
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-modified-inactive-face nil
;;                     :foreground (face-attribute 'default :background)
;;                     :background "#e5786d"
;;                     :inherit 'mode-line-inactive)

;; ;; unmodified buffer
;; (make-face 'mode-line-unmodified-face)
;; (make-face 'mode-line-unmodified-inactive-face)
;; (set-face-attribute 'mode-line-unmodified-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-unmodified-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'mode-line-inactive)

;; ;; the remote indicator
;; (make-face 'mode-line-remote-face)
;; (make-face 'mode-line-remote-inactive-face)
;; (set-face-attribute 'mode-line-remote-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-remote-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line-inactive)

;; ;; the current file name
;; (make-face 'mode-line-filename-face)
;; (make-face 'mode-line-filename-inactive-face)
;; (set-face-attribute 'mode-line-filename-face nil
;;                     :foreground (face-attribute 'font-lock-type-face :foreground)
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-filename-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line-inactive)

;; ;; the major mode name
;; (make-face 'mode-line-major-mode-face)
;; (make-face 'mode-line-major-mode-inactive-face)
;; (set-face-attribute 'mode-line-major-mode-face nil
;;                     :foreground (face-attribute 'default :foreground)
;;                     :inherit 'powerline-active1)
;; (set-face-attribute 'mode-line-major-mode-inactive-face nil
;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background))
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'powerline-inactive1)

;; ;; the minor mode name
;; (make-face 'mode-line-minor-mode-face)
;; (make-face 'mode-line-minor-mode-inactive-face)
;; (set-face-attribute 'mode-line-minor-mode-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'powerline-active1)
;; (set-face-attribute 'mode-line-minor-mode-inactive-face nil
;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background))
;;                     :foreground (face-attribute 'powerline-inactive1 :background)
;;                     :inherit 'powerline-inactive1)

;; ;; the position face
;; (make-face 'mode-line-position-face)
;; (make-face 'mode-line-position-inactive-face)
;; (set-face-attribute 'mode-line-position-face nil
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-position-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line-inactive)

;; ;; the 80col warning face
;; (make-face 'mode-line-80col-face)
;; (make-face 'mode-line-80col-inactive-face)
;; (set-face-attribute 'mode-line-80col-face nil
;;                     :background "#e5786d"
;;                     :foreground (face-attribute 'default :background)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-80col-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :background (face-attribute 'default :background)
;;                     :inherit 'mode-line-inactive)

;; ;; the buffer percentage face
;; (make-face 'mode-line-percentage-face)
;; (make-face 'mode-line-percentage-inactive-face)
;; (set-face-attribute 'mode-line-percentage-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'mode-line)
;; (set-face-attribute 'mode-line-percentage-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'mode-line-inactive)

;; ;; the directory face
;; (make-face 'mode-line-shell-dir-face)
;; (make-face 'mode-line-shell-dir-inactive-face)
;; (set-face-attribute 'mode-line-shell-dir-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'powerline-active1)
;; (set-face-attribute 'mode-line-shell-dir-inactive-face nil
;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
;;                     :inherit 'powerline-inactive1)

;; (defun shorten-directory (dir max-length)
;;   "Show up to `max-length' characters of a directory name `dir'."
;;   (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
;;         (output ""))
;;     (when (and path (equal "" (car path)))
;;       (setq path (cdr path)))
;;     (while (and path (< (length output) (- max-length 4)))
;;       (setq output (concat (car path) "/" output))
;;       (setq path (cdr path)))
;;     (when path
;;       (setq output (concat ".../" output)))
;;     output))

;; (defpowerline dennis-powerline-narrow
;;   (let (real-point-min real-point-max)
;;     (save-excursion
;;       (save-restriction
;;         (widen)
;;         (setq real-point-min (point-min) real-point-max (point-max))))
;;     (when (or (/= real-point-min (point-min))
;;               (/= real-point-max (point-max)))
;;       (propertize (concat (char-to-string #x2691) " Narrow")
;;                   'mouse-face 'mode-line-highlight
;;                   'help-echo "mouse-1: Remove narrowing from the current buffer"
;;                   'local-map (make-mode-line-mouse-map
;;                               'mouse-1 'mode-line-widen)))))


;; (defpowerline dennis-powerline-vc
;;   (when (and (buffer-file-name (current-buffer)) vc-mode)
;;     (if window-system
;;         (let ((backend (vc-backend (buffer-file-name (current-buffer)))))
;;           (when backend
;;             (format "%s %s: %s"
;;                     (char-to-string #xe0a0)
;;                     backend
;;                     (vc-working-revision (buffer-file-name (current-buffer)) backend)))))))

;; (setq-default
;;  mode-line-format
;;  '("%e"
;;    (:eval
;;     (let* ((active (powerline-selected-window-active))

;;            ;; toggle faces between active and inactive
;;            (mode-line (if active 'mode-line 'mode-line-inactive))
;;            (face1 (if active 'powerline-active1 'powerline-inactive1))
;;            (face2 (if active 'powerline-active2 'powerline-inactive2))
;;            (read-only-face (if active 'mode-line-read-only-face 'mode-line-read-only-inactive-face))
;;            (modified-face (if active 'mode-line-modified-face 'mode-line-modified-inactive-face))
;;            (unmodified-face (if active 'mode-line-unmodified-face 'mode-line-unmodified-inactive-face))
;;            (position-face (if active 'mode-line-position-face 'mode-line-position-inactive-face))
;;            (80col-face (if active 'mode-line-80col-face 'mode-line-80col-inactive-face))
;;            (major-mode-face (if active 'mode-line-major-mode-face 'mode-line-major-mode-inactive-face))
;;            (minor-mode-face (if active 'mode-line-minor-mode-face 'mode-line-minor-mode-inactive-face))
;;            (filename-face (if active 'mode-line-filename-face 'mode-line-filename-inactive-face))
;;            (percentage-face (if active 'mode-line-percentage-face 'mode-line-percentage-inactive-face))
;;            (remote-face (if active 'mode-line-remote-face 'mode-line-remote-inactive-face))
;;            (shell-dir-face (if active 'mode-line-shell-dir-face 'mode-line-shell-dir-inactive-face))

;;            ;; get the separators
;;            (separator-left (intern (format "powerline-%s-%s"
;;                                            (powerline-current-separator)
;;                                            (car powerline-default-separator-dir))))
;;            (separator-right (intern (format "powerline-%s-%s"
;;                                             (powerline-current-separator)
;;                                             (cdr powerline-default-separator-dir))))

;;            ;; the right side
;;            (rhs (list
;;                  (dennis-powerline-vc minor-mode-face 'r)
;;                  (funcall separator-right face1 position-face)
;;                  (powerline-raw " " position-face)
;;                  (powerline-raw (char-to-string #xe0a1) position-face)
;;                  (powerline-raw " " position-face)
;;                  (powerline-raw "%4l" position-face 'r)
;;                  ;; display a warning if we go above 80 columns
;;                  (if (>= (current-column) 80)
;;                      (funcall separator-right position-face 80col-face)
;;                    (powerline-raw (char-to-string #x2502) position-face))
;;                  (if (>= (current-column) 80)
;;                      (powerline-raw "%3c" 80col-face 'l)
;;                    (powerline-raw "%3c" position-face 'l))
;;                  (if (>= (current-column) 80)
;;                      (powerline-raw " " 80col-face)
;;                    (powerline-raw " " position-face))
;;                  (if (>= (current-column) 80)
;;                      (funcall separator-left 80col-face percentage-face)
;;                    (funcall separator-left position-face percentage-face))
;;                  (powerline-raw " " percentage-face)
;;                  (powerline-raw "%6p" percentage-face 'r)))

;;            ;; the left side
;;            (lhs (list
;;                  ;; this is the modified status indicator
;;                  (cond (buffer-read-only
;;                         (powerline-raw "  " read-only-face))
;;                        ((buffer-modified-p)
;;                         ;; do not light up when in an interactive buffer. Set
;;                         ;; ML-INTERACTIVE? in hooks for interactive buffers.
;;                         (if (not (bound-and-true-p ml-interactive?))
;;                             (powerline-raw "  " modified-face)
;;                           (powerline-raw "  " unmodified-face)))
;;                        ((not (buffer-modified-p))
;;                         (powerline-raw "  " unmodified-face)))
;;                  (cond (buffer-read-only
;;                         (powerline-raw (concat (char-to-string #xe0a2) " ") read-only-face 'l))
;;                        ((buffer-modified-p)
;;                         (if (not (bound-and-true-p ml-interactive?))
;;                             (powerline-raw (concat (char-to-string #x2621) " ") modified-face 'l)
;;                           (powerline-raw (concat (char-to-string #x259e) " ") unmodified-face 'l)))
;;                        ((not (buffer-modified-p))
;;                         (powerline-raw (concat (char-to-string #x26c1) " ") unmodified-face 'l)))
;;                  (cond (buffer-read-only
;;                         (funcall separator-right read-only-face filename-face))
;;                        ((buffer-modified-p)
;;                         (if (not (bound-and-true-p ml-interactive?))
;;                             (funcall separator-right modified-face filename-face)
;;                           (funcall separator-right unmodified-face filename-face)))
;;                        ((not (buffer-modified-p))
;;                         (funcall separator-right unmodified-face filename-face)))
;;                  ;; remote indicator
;;                  (when (file-remote-p default-directory)
;;                    (powerline-raw (concat " " (char-to-string #x211b)) remote-face))
;;                  ;; filename and mode info
;;                  (powerline-buffer-id filename-face 'l)
;;                  (powerline-raw " " filename-face)
;;                  (funcall separator-left filename-face major-mode-face)
;;                  ;; do not need mode info when in ansi-term
;;                  (unless (bound-and-true-p show-dir-in-mode-line?)
;;                    (powerline-major-mode major-mode-face 'l))
;;                  (unless (bound-and-true-p show-dir-in-mode-line?)
;;                    (powerline-process major-mode-face 'l))
;;                  ;; show a flag if in line mode in terminal
;;                  (when (and (bound-and-true-p show-dir-in-mode-line?) (term-in-line-mode))
;;                    (powerline-raw (concat (char-to-string #x2691) " Line") major-mode-face))
;;                  (powerline-raw " " major-mode-face)
;;                  ;; little trick to move the directory name to the mode line
;;                  ;; when inside of emacs set SHOW-DIR-IN-MODE-LINE? to enable
;;                  (if (bound-and-true-p show-dir-in-mode-line?)
;;                      (when (not (file-remote-p default-directory))
;;                        (powerline-raw (shorten-directory default-directory 45)
;;                                       shell-dir-face))
;;                    (powerline-minor-modes minor-mode-face 'l))
;;                  (unless (bound-and-true-p show-dir-in-mode-line?)
;;                    (dennis-powerline-narrow major-mode-face 'l)))))

;;       ;; concatenate it all together
;;       (concat (powerline-render lhs)
;;               (powerline-fill face1 (powerline-width rhs))
;;               (powerline-render rhs))))))
  )
#+end_src

* Global keybinding
I'll be stealing a bunch of these from [[https://github.com/bbatsov/prelude/blob/master/README.md#keymap][Prelude]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; Font sizea
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
					  ; Start eshell or switch to it if it's active.
  (global-set-key (kbd "C-x m") 'eshell)

  ;; Start a new eshell even if one is active.
  (global-set-key (kbd "C-x M")
		  (lambda () (interactive) (eshell t)))
#+end_src

#+RESULTS:

* SSH
[[http://sachachua.com/blog/][Sacha Chua]] did the work for me [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgb6b973e][here]]. This makes magit work nicely.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my/ssh-refresh ()
    "Reset the environment variable SSH_AUTH_SOCK"
    (interactive)
    (let (ssh-auth-sock-old (getenv "SSH_AUTH_SOCK"))
      (setenv "SSH_AUTH_SOCK"
              (car (split-string
                    (shell-command-to-string
                     "ls -t $(find /tmp/ssh-* -user $USER -name 'agent.*' 2> /dev/null)"))))
      (message
       (format "SSH_AUTH_SOCK %s --> %s"
               ssh-auth-sock-old (getenv "SSH_AUTH_SOCK")))))

  (my/ssh-refresh)
#+end_src

#+RESULTS:
: SSH_AUTH_SOCK nil --> /tmp/ssh-NTkRr2af1PnJ/agent.2777

* UI stuff
The hippest emacsers don't need menus, toolbars, or scrollbars. But I
don't either.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq inhibit-startup-screen t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)
#+end_src

#+RESULTS:
: 1

I like an obnoxious, bright, blinking cursor. This adds to it. Cool.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package beacon
  :config (beacon-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package anzu
    :bind
    (([remap query-replace]        . anzu-query-replace)
     ([remap query-replace-regexp] . anzu-query-replace-regexp))
    :config
    (setq anzu-mode-lighter ""
	  anzu-deactivate-region t
	  anzu-search-threshold 1000
	  anzu-replace-threshold 50
	  anzu-replace-to-string-separator " => ")
    (global-anzu-mode +1))
#+end_src

Try this once; never look back.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package avy
  :bind ("C-c j" . avy-goto-word-or-subword-1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package diff-hl
    :config
    (diff-hl-mode 1))
#+end_src

#+RESULTS:
: t

Likewise.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package expand-region
    :bind ("C-=" . er/expand-region)
    :config
    (delete-selection-mode t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package imenu-anywhere
  :bind ("C-." . helm-imenu-anywhere))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package move-text
    :bind (
	   ;; ("M-up"   . move-text-up)
	   ;; ("M-down" . move-text-down)
	   ))
#+end_src


I kinda don't like it creating a big frame, but the visualization
helps a bit, I think.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package undo-tree
    :bind (("C-x u" . undo-tree-visualize))
    :config
    (setq undo-tree-history-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq undo-tree-auto-save-history t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package volatile-highlights
    :config (volatile-highlights-mode t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package which-key
    :config (which-key-mode))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package zop-to-char
    :bind ([remap zap-to-char] . zop-to-char))
#+end_src

I think this is a nice theme, but I could never get my tweaks to stick
when I used Prelude. I'm moody about themes. I'm sure I'll be
switching from this to wombat, to leuven, to
smart-modeline-respectful, /etc/.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package zenburn-theme
  :config
  (set-cursor-color "red")
  (blink-cursor-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))

  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  (global-auto-revert-mode t)
#+end_src
This ruined me. I can no longer get along without [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][this]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
	(forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
	(move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+end_src

* Custom file
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
#+end_src

#+RESULTS:
: /home/juntunenkc/.emacs.d/custom.el

