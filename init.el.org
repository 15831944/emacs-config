#+Title: My emacs config
* Prolegomena
There are things I like and things I don't like about [[https://github.com/bbatsov/prelude][Prelude]]. The
things I like, I really, really like. I wabt to reimplement them all
with Wiegley's [[https://github.com/jwiegley/use-package][use-package]] gizmo.

* Custom file
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (load custom-file t)
  (setq user-full-name    "K. C. Juntunen"
        user-mail-address "juntunen.kc@gmail.com")
#+end_src

#+RESULTS:
: /home/juntunenkc/.emacs.d/custom.el

* Install packages
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'package)
  
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  
  (setq package-user-dir
        (expand-file-name "elpa" (expand-file-name "~/.emacs.d")))
  (package-initialize)
  
  (unless inhibit-startup-screen (package-refresh-contents))
#+end_src

Anything that needs to be =require='d before use-package goes here.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defvar my/packages
    '(bind-key
      diminish
      use-package)
    "A list of packages to ensure are installed at launch.")
#+end_src
Elisp is so cool.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (mapc #'(lambda (package) (unless (package-installed-p package) (package-install package))) my/packages)
  
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+end_src

* Code
** General
I need to learn to make this not stomp on eldoc like it does sometimes.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package flycheck
    :ensure t
    :defer t
    :config (global-flycheck-mode 1))
#+end_src
The more the merrier. I eventually want it to be a little less than
global. It's generally no help in eshell, jabber, or ERC.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; (defvar company-backends)
  (use-package company-anaconda
    :ensure t
    :defer t)
  
  (use-package company-shell
    :ensure t
    :defer t)
  
  (use-package company
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (use-package company-irony :ensure t :defer t)
    (setq company-idle-delay              0
          company-minimum-prefix-length   2
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil
          company-tooltip-flip-when-above t
          company-backends                '((company-anaconda
                                             company-bbdb
                                             company-elisp
                                             company-gtags
                                             company-irony
                                             company-shell))))
  
#+end_src
This is always helpful.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package smartparens
    :ensure t
    :defer t
    :config (smartparens-global-mode 1)
    (sp-use-paredit-bindings))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (whitespace-mode 1)
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face tabs empty trailing lines-tail))
#+end_src
** C/C++
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package irony
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
	'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
	'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+end_src

** Python
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package anaconda-mode
    :ensure t
    :defer t
    :commands anaconda-mode
    :diminish anaconda-mode
    :init
    (progn
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'eldoc-mode)))
  
#+end_src

** Revision control
*** Magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (unless (version< emacs-version "24.4")
    (use-package magit
      :ensure t
      :defer t
      :bind (("C-x g" . magit-status)
             ("C-x M-g" . magit-dispatch-popup))))
#+end_src
* Helm
I dig helm. I don't care much for ido.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package helm
    :ensure t
    :defer t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay                       0.0
            helm-input-idle-delay                 0.01
            helm-yas-display-key-on-candidate     t
            helm-quick-update                     t
            helm-M-x-requires-pattern             nil
            helm-ff-skip-boring-files             t
            helm-split-window-in-side-p           t
            helm-buffers-fuzzy-matching           t
            helm-move-to-line-cycle-in-source     t
            helm-ff-search-library-in-sexp        t
            helm-ff-file-name-history-use-recentf t)
      (helm-mode))
    :bind (("M-x"     . helm-M-x)
           ("C-x C-m" . helm-M-x)
           ("M-y"     . helm-show-kill-ring)
           ("C-x b"   . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-h f"   . helm-apropos)
           ("C-h r"   . helm-info-emacs)
           ("C-h C-l" . helm-locate-library)
           :map helm-command-map
           ("o"       . helm-occur)
           ("g"       . helm-do-grep)
           ("C-c w"   . helm-wikipedia-suggest)
           ("SPC"     . helm-all-mark-rings)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package helm-descbinds
    :ensure t
    :defer t
    :bind (("C-h b" . helm-descbinds)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (unless (string-equal system-type "windows-nt")
      (use-package helm-projectile
        :ensure t
        :defer t))
  
#+end_src
* Org Mode
I like the bleeding edge. Heck, I compiled my emacs from git :-)
[GNU Emacs 25.0.93.2 (x86_64-unknown-linux-gnu, GTK+ Version 3.16.7) of 2016-04-28]
On org-agenda-files, the documentation says:
#+begin_quote
If the value of the variable is not a list but a single file name, then
the list of agenda files is actually stored and maintained in that file, one
agenda file per line.  In this file paths can be given relative to
‘org-directory’.  Tilde expansion and environment variable substitution
are also made.
#+end_quote
Maybe I'll do that sometime.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-id
    :defer t)
  
  (use-package org
    :load-path "~/git/org-mode/lisp"
    :bind (("C-c a"   . org-agenda)
           ("C-c C-w" . org-refile)
           ("C-c c"   . org-capture))
    :defer t
    :config
    (setq org-directory
      (if (string-equal system-type "windows-nt")
          "~/../../Dropbox/org"  
        "~/Dropbox/org"))
    (let ((dropbox-dir (concat org-directory "/agenda")))
  
      (setq org-agenda-files
            (delq nil
                  (mapcar (lambda (x) (and (file-exists-p x) x))
                          (directory-files
                           (expand-file-name dropbox-dir) t org-agenda-file-regexp))))
      (setq org-todo-keywords
            (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
      
      (setq org-todo-keyword-faces
            (quote (("TODO" :foreground "red" :weight bold)
                    ("NEXT" :foreground "blue" :weight bold)
                    ("DONE" :foreground "forest green" :weight bold)
                    ("WAITING" :foreground "orange" :weight bold)
                    ("HOLD" :foreground "magenta" :weight bold)
                    ("CANCELLED" :foreground "forest green" :weight bold)
                    ("MEETING" :foreground "forest green" :weight bold)
                    ("PHONE" :foreground "forest green" :weight bold))))
      (setq org-use-fast-todo-selection t)
      (setq org-todo-state-tags-triggers
            (quote (("CANCELLED" ("CANCELLED" . t))
                    ("WAITING" ("WAITING" . t))
                    ("HOLD" ("WAITING") ("HOLD" . t))
                    (done ("WAITING") ("HOLD"))
                    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
      
      (setq org-default-notes-file (concat dropbox-dir "/refile.org"))
      (setq org-capture-templates
            (quote (("t" "todo" entry (file (concat dropbox-dir "/refile.org"))
                     "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                    ("r" "respond" entry (file (concat dropbox-dir "/refile.org"))
                     "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                    ("n" "note" entry (file (concat dropbox-dir "/agenda/refile.org"))
                     "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                    ("j" "Journal" entry (file+datetree (concat dropbox-dir "/diary.org"))
                     "* %?\n%U\n" :clock-in t :clock-resume t)
                    ("w" "org-protocol" entry (file (concat dropbox-dir "/refile.org"))
                     "* TODO Review %c\n%U\n" :immediate-finish t)
                    ("m" "Meeting" entry (file (concat dropbox-dir "/refile.org"))
                     "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                    ("p" "Phone call" entry (file (concat dropbox-dir "/refile.org"))
                     "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                    ("h" "Habit" entry (file (concat dropbox-dir "/refile.org"))
                     "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
      
      (defun bh/remove-empty-drawer-on-clock-out ()
        (interactive)
        (save-excursion
          (beginning-of-line 0)
          (org-remove-empty-drawer-at "LOGBOOK" (point))))
      
      (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
      (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                       (org-agenda-files :maxlevel . 9))))
      ;; Do not dim blocked tasks
      (setq org-agenda-dim-blocked-tasks nil)
      
      ;; Compact the block agenda view
      (setq org-agenda-compact-blocks t)
      
      ;; Custom agenda command definitions
      (setq org-agenda-custom-commands
            (quote (("N" "Notes" tags "NOTE"
                     ((org-agenda-overriding-header "Notes")
                      (org-tags-match-list-sublevels t)))
                    ("h" "Habits" tags-todo "STYLE=\"habit\""
                     ((org-agenda-overriding-header "Habits")
                      (org-agenda-sorting-strategy
                       '(todo-state-down effort-up category-keep))))
                    (" " "Agenda"
                     ((agenda "" nil)
                      (tags "REFILE"
                            ((org-agenda-overriding-header "Tasks to Refile")
                             (org-tags-match-list-sublevels nil)))
                      (tags-todo "-CANCELLED/!"
                                 ((org-agenda-overriding-header "Stuck Projects")
                                  (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-HOLD-CANCELLED/!"
                                 ((org-agenda-overriding-header "Projects")
                                  (org-agenda-skip-function 'bh/skip-non-projects)
                                  (org-tags-match-list-sublevels 'indented)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-CANCELLED/!NEXT"
                                 ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                  (org-tags-match-list-sublevels t)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-sorting-strategy
                                   '(todo-state-down effort-up category-keep))))
                      (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                                 ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                                 ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-project-tasks)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-CANCELLED+WAITING|HOLD/!"
                                 ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-non-tasks)
                                  (org-tags-match-list-sublevels nil)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                      (tags "-REFILE/"
                            ((org-agenda-overriding-header "Tasks to Archive")
                             (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                             (org-tags-match-list-sublevels nil))))
                     nil))))
      (defun bh/org-auto-exclude-function (tag)
        "Automatic task exclusion in the agenda with / RET"
        (and (cond
              ((string= tag "hold")
               t)
              ((string= tag "farm")
               t))
             (concat "-" tag)))
      
      (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)
      ;;
      ;; Resume clocking task when emacs is restarted
      (org-clock-persistence-insinuate)
      ;;
      ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
      (setq org-clock-history-length 23)
      ;; Resume clocking task on clock-in if the clock is open
      (setq org-clock-in-resume t)
      ;; Change tasks to NEXT when clocking in
      (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
      ;; Separate drawers for clocking and logs
      (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
      ;; Save clock data and state changes and notes in the LOGBOOK drawer
      (setq org-clock-into-drawer t)
      ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
      (setq org-clock-out-remove-zero-time-clocks t)
      ;; Clock out when moving task to a done state
      (setq org-clock-out-when-done t)
      ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      (setq org-clock-persist t)
      ;; Do not prompt to resume an active clock
      (setq org-clock-persist-query-resume nil)
      ;; Enable auto clock resolution for finding open clocks
      (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
      ;; Include current clocking task in clock reports
      (setq org-clock-report-include-clocking-task t)
      
      (setq bh/keep-clock-running nil)
      
      (defun bh/clock-in-to-next (kw)
        "Switch a task from TODO to NEXT when clocking in.
    Skips capture tasks, projects, and subprojects.
    Switch projects and subprojects from NEXT back to TODO"
        (when (not (and (boundp 'org-capture-mode) org-capture-mode))
          (cond
           ((and (member (org-get-todo-state) (list "TODO"))
                 (bh/is-task-p))
            "NEXT")
           ((and (member (org-get-todo-state) (list "NEXT"))
                 (bh/is-project-p))
            "TODO"))))
      
      (defun bh/find-project-task ()
        "Move point to the parent (project) task if any"
        (save-restriction
          (widen)
          (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
            (while (org-up-heading-safe)
              (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                (setq parent-task (point))))
            (goto-char parent-task)
            parent-task)))
      
      (defun bh/punch-in (arg)
        "Start continuous clocking and set the default task to the
    selected task.  If no task is selected set the Organization task
    as the default task."
        (interactive "p")
        (setq bh/keep-clock-running t)
        (if (equal major-mode 'org-agenda-mode)
            ;;
            ;; We're in the agenda
            ;;
            (let* ((marker (org-get-at-bol 'org-hd-marker))
                   (tags (org-with-point-at marker (org-get-tags-at))))
              (if (and (eq arg 4) tags)
                  (org-agenda-clock-in '(16))
                (bh/clock-in-organization-task-as-default)))
          ;;
          ;; We are not in the agenda
          ;;
          (save-restriction
            (widen)
                                          ; Find the tags on the current task
            (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
                (org-clock-in '(16))
              (bh/clock-in-organization-task-as-default)))))
      
      (defun bh/punch-out ()
        (interactive)
        (setq bh/keep-clock-running nil)
        (when (org-clock-is-active)
          (org-clock-out))
        (org-agenda-remove-restriction-lock))
      
      (defun bh/clock-in-default-task ()
        (save-excursion
          (org-with-point-at org-clock-default-task
            (org-clock-in))))
      
      (defun bh/clock-in-parent-task ()
        "Move point to the parent (project) task if any and clock in"
        (let ((parent-task))
          (save-excursion
            (save-restriction
              (widen)
              (while (and (not parent-task) (org-up-heading-safe))
                (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                  (setq parent-task (point))))
              (if parent-task
                  (org-with-point-at parent-task
                    (org-clock-in))
                (when bh/keep-clock-running
                  (bh/clock-in-default-task)))))))
      
      (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")
      
      (defun bh/clock-in-organization-task-as-default ()
        (interactive)
        (org-with-point-at (org-id-find bh/organization-task-id 'marker)
          (org-clock-in '(16))))
      
      (defun bh/clock-out-maybe ()
        (when (and bh/keep-clock-running
                   (not org-clock-clocking-in)
                   (marker-buffer org-clock-default-task)
                   (not org-clock-resolving-clocks-due-to-idleness))
          (bh/clock-in-parent-task)))
      
      (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
      (require 'org-id)
      (defun bh/clock-in-task-by-id (id)
        "Clock in a task by id"
        (org-with-point-at (org-id-find id 'marker)
          (org-clock-in nil)))
      
      (defun bh/clock-in-last-task (arg)
        "Clock in the interrupted task if there is one
    Skip the default task and get the next one.
    A prefix arg forces clock in of the default task."
        (interactive "p")
        (let ((clock-in-to-task
               (cond
                ((eq arg 4) org-clock-default-task)
                ((and (org-clock-is-active)
                      (equal org-clock-default-task (cadr org-clock-history)))
                 (caddr org-clock-history))
                ((org-clock-is-active) (cadr org-clock-history))
                ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
                (t (car org-clock-history)))))
          (widen)
          (org-with-point-at clock-in-to-task
            (org-clock-in nil))))
      
      (setq org-agenda-clock-consistency-checks
            (quote (:max-duration "4:00"
                                  :min-duration 0
                                  :max-gap 0
                                  :gap-ok-around ("4:00"))))
      
      (setq org-clock-out-remove-zero-time-clocks t)
      
      ;; Agenda clock report parameters
      (setq org-agenda-clockreport-parameter-plist
            (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))
      ;; Agenda log mode items to display (closed and state changes by default)
      (setq org-agenda-log-mode-items (quote (closed state)))
      
                                          ; Tags with fast selection keys
      (setq org-tag-alist (quote ((:startgroup)
                                  ("@errand" . ?e)
                                  ("@office" . ?o)
                                  ("@home" . ?H)
                                  ("@farm" . ?f)
                                  (:endgroup)
                                  ("WAITING" . ?w)
                                  ("HOLD" . ?h)
                                  ("PERSONAL" . ?P)
                                  ("WORK" . ?W)
                                  ("FARM" . ?F)
                                  ("ORG" . ?O)
                                  ("NORANG" . ?N)
                                  ("crypt" . ?E)
                                  ("NOTE" . ?n)
                                  ("CANCELLED" . ?c)
                                  ("FLAGGED" . ??))))
      
                                          ; Allow setting single tags without the menu
      (setq org-fast-tag-selection-single-key (quote expert))
      
                                          ; For tag searches ignore tasks with scheduled and deadline dates
      (setq org-agenda-tags-todo-honor-ignore-options t)
      
      (defun bh/clock-in-task-by-id (id)
        "Clock in a task by id"
        (org-with-point-at (org-id-find id 'marker)
          (org-clock-in nil)))
      
      (defun bh/clock-in-last-task (arg)
        "Clock in the interrupted task if there is one
    Skip the default task and get the next one.
    A prefix arg forces clock in of the default task."
        (interactive "p")
        (let ((clock-in-to-task
               (cond
                ((eq arg 4) org-clock-default-task)
                ((and (org-clock-is-active)
                      (equal org-clock-default-task (cadr org-clock-history)))
                 (caddr org-clock-history))
                ((org-clock-is-active) (cadr org-clock-history))
                ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
                (t (car org-clock-history)))))
          (widen)
          (org-with-point-at clock-in-to-task
            (org-clock-in nil))))
      
      ))
#+end_src

#+RESULTS:
: t

* Powerline
[[https://ogbe.net/][Dennis Ogbe]] has the [[https://ogbe.net/emacsconfig.html#orgheadline24][coolest]] mode-line I've ever seen. So I cribbed his
code. Unfortunately, for me, it gets super fat on some frames. That's
just unacceptible. :-(
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package powerline
      :ensure t
      :config
      (powerline-default-theme)
    ;; (if (display-graphic-p)
    ;;     (progn
    ;;       (setq powerline-default-separator 'contour)
    ;;       (setq powerline-height 25))
    ;;   (setq powerline-default-separator-dir '(right . left)))
  
    ;; ;; first reset the faces that already exist
    ;; (set-face-attribute 'mode-line nil
    ;;                     :foreground (face-attribute 'default :foreground)
    ;;                     :family "Liberation Sans"
    ;;                     :weight 'bold
    ;;                     :background (face-attribute 'fringe :background))
    ;; (set-face-attribute 'mode-line-inactive nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :background (face-attribute 'fringe :background)
    ;;                     :family "Liberation Sans"
    ;;                     :weight 'bold
    ;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background)))
    ;; (set-face-attribute 'powerline-active1 nil
    ;;                     :background "gray30")
    ;; (set-face-attribute 'powerline-inactive1 nil
    ;;                     :background (face-attribute 'default :background)
    ;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background)))
  
    ;; ;; these next faces are for the status indicator
    ;; ;; read-only buffer
    ;; (make-face 'mode-line-read-only-face)
    ;; (make-face 'mode-line-read-only-inactive-face)
    ;; (set-face-attribute 'mode-line-read-only-face nil
    ;;                     :foreground (face-attribute 'default :foreground)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-read-only-inactive-face nil
    ;;                     :foreground (face-attribute 'default :foreground)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; modified buffer
    ;; (make-face 'mode-line-modified-face)
    ;; (make-face 'mode-line-modified-inactive-face)
    ;; (set-face-attribute 'mode-line-modified-face nil
    ;;                     :foreground (face-attribute 'default :background)
    ;;                     :background "#e5786d"
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-modified-inactive-face nil
    ;;                     :foreground (face-attribute 'default :background)
    ;;                     :background "#e5786d"
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; unmodified buffer
    ;; (make-face 'mode-line-unmodified-face)
    ;; (make-face 'mode-line-unmodified-inactive-face)
    ;; (set-face-attribute 'mode-line-unmodified-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-unmodified-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; the remote indicator
    ;; (make-face 'mode-line-remote-face)
    ;; (make-face 'mode-line-remote-inactive-face)
    ;; (set-face-attribute 'mode-line-remote-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-remote-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; the current file name
    ;; (make-face 'mode-line-filename-face)
    ;; (make-face 'mode-line-filename-inactive-face)
    ;; (set-face-attribute 'mode-line-filename-face nil
    ;;                     :foreground (face-attribute 'font-lock-type-face :foreground)
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-filename-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; the major mode name
    ;; (make-face 'mode-line-major-mode-face)
    ;; (make-face 'mode-line-major-mode-inactive-face)
    ;; (set-face-attribute 'mode-line-major-mode-face nil
    ;;                     :foreground (face-attribute 'default :foreground)
    ;;                     :inherit 'powerline-active1)
    ;; (set-face-attribute 'mode-line-major-mode-inactive-face nil
    ;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background))
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'powerline-inactive1)
  
    ;; ;; the minor mode name
    ;; (make-face 'mode-line-minor-mode-face)
    ;; (make-face 'mode-line-minor-mode-inactive-face)
    ;; (set-face-attribute 'mode-line-minor-mode-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'powerline-active1)
    ;; (set-face-attribute 'mode-line-minor-mode-inactive-face nil
    ;;                     :box `(:line-width -2 :color ,(face-attribute 'fringe :background))
    ;;                     :foreground (face-attribute 'powerline-inactive1 :background)
    ;;                     :inherit 'powerline-inactive1)
  
    ;; ;; the position face
    ;; (make-face 'mode-line-position-face)
    ;; (make-face 'mode-line-position-inactive-face)
    ;; (set-face-attribute 'mode-line-position-face nil
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-position-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; the 80col warning face
    ;; (make-face 'mode-line-80col-face)
    ;; (make-face 'mode-line-80col-inactive-face)
    ;; (set-face-attribute 'mode-line-80col-face nil
    ;;                     :background "#e5786d"
    ;;                     :foreground (face-attribute 'default :background)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-80col-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :background (face-attribute 'default :background)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; the buffer percentage face
    ;; (make-face 'mode-line-percentage-face)
    ;; (make-face 'mode-line-percentage-inactive-face)
    ;; (set-face-attribute 'mode-line-percentage-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'mode-line)
    ;; (set-face-attribute 'mode-line-percentage-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'mode-line-inactive)
  
    ;; ;; the directory face
    ;; (make-face 'mode-line-shell-dir-face)
    ;; (make-face 'mode-line-shell-dir-inactive-face)
    ;; (set-face-attribute 'mode-line-shell-dir-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'powerline-active1)
    ;; (set-face-attribute 'mode-line-shell-dir-inactive-face nil
    ;;                     :foreground (face-attribute 'font-lock-comment-face :foreground)
    ;;                     :inherit 'powerline-inactive1)
  
    ;; (defun shorten-directory (dir max-length)
    ;;   "Show up to `max-length' characters of a directory name `dir'."
    ;;   (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
    ;;         (output ""))
    ;;     (when (and path (equal "" (car path)))
    ;;       (setq path (cdr path)))
    ;;     (while (and path (< (length output) (- max-length 4)))
    ;;       (setq output (concat (car path) "/" output))
    ;;       (setq path (cdr path)))
    ;;     (when path
    ;;       (setq output (concat ".../" output)))
    ;;     output))
  
    ;; (defpowerline dennis-powerline-narrow
    ;;   (let (real-point-min real-point-max)
    ;;     (save-excursion
    ;;       (save-restriction
    ;;         (widen)
    ;;         (setq real-point-min (point-min) real-point-max (point-max))))
    ;;     (when (or (/= real-point-min (point-min))
    ;;               (/= real-point-max (point-max)))
    ;;       (propertize (concat (char-to-string #x2691) " Narrow")
    ;;                   'mouse-face 'mode-line-highlight
    ;;                   'help-echo "mouse-1: Remove narrowing from the current buffer"
    ;;                   'local-map (make-mode-line-mouse-map
    ;;                               'mouse-1 'mode-line-widen)))))
  
  
    ;; (defpowerline dennis-powerline-vc
    ;;   (when (and (buffer-file-name (current-buffer)) vc-mode)
    ;;     (if window-system
    ;;         (let ((backend (vc-backend (buffer-file-name (current-buffer)))))
    ;;           (when backend
    ;;             (format "%s %s: %s"
    ;;                     (char-to-string #xe0a0)
    ;;                     backend
    ;;                     (vc-working-revision (buffer-file-name (current-buffer)) backend)))))))
  
    ;; (setq-default
    ;;  mode-line-format
    ;;  '("%e"
    ;;    (:eval
    ;;     (let* ((active (powerline-selected-window-active))
  
    ;;            ;; toggle faces between active and inactive
    ;;            (mode-line (if active 'mode-line 'mode-line-inactive))
    ;;            (face1 (if active 'powerline-active1 'powerline-inactive1))
    ;;            (face2 (if active 'powerline-active2 'powerline-inactive2))
    ;;            (read-only-face (if active 'mode-line-read-only-face 'mode-line-read-only-inactive-face))
    ;;            (modified-face (if active 'mode-line-modified-face 'mode-line-modified-inactive-face))
    ;;            (unmodified-face (if active 'mode-line-unmodified-face 'mode-line-unmodified-inactive-face))
    ;;            (position-face (if active 'mode-line-position-face 'mode-line-position-inactive-face))
    ;;            (80col-face (if active 'mode-line-80col-face 'mode-line-80col-inactive-face))
    ;;            (major-mode-face (if active 'mode-line-major-mode-face 'mode-line-major-mode-inactive-face))
    ;;            (minor-mode-face (if active 'mode-line-minor-mode-face 'mode-line-minor-mode-inactive-face))
    ;;            (filename-face (if active 'mode-line-filename-face 'mode-line-filename-inactive-face))
    ;;            (percentage-face (if active 'mode-line-percentage-face 'mode-line-percentage-inactive-face))
    ;;            (remote-face (if active 'mode-line-remote-face 'mode-line-remote-inactive-face))
    ;;            (shell-dir-face (if active 'mode-line-shell-dir-face 'mode-line-shell-dir-inactive-face))
  
    ;;            ;; get the separators
    ;;            (separator-left (intern (format "powerline-%s-%s"
    ;;                                            (powerline-current-separator)
    ;;                                            (car powerline-default-separator-dir))))
    ;;            (separator-right (intern (format "powerline-%s-%s"
    ;;                                             (powerline-current-separator)
    ;;                                             (cdr powerline-default-separator-dir))))
  
    ;;            ;; the right side
    ;;            (rhs (list
    ;;                  (dennis-powerline-vc minor-mode-face 'r)
    ;;                  (funcall separator-right face1 position-face)
    ;;                  (powerline-raw " " position-face)
    ;;                  (powerline-raw (char-to-string #xe0a1) position-face)
    ;;                  (powerline-raw " " position-face)
    ;;                  (powerline-raw "%4l" position-face 'r)
    ;;                  ;; display a warning if we go above 80 columns
    ;;                  (if (>= (current-column) 80)
    ;;                      (funcall separator-right position-face 80col-face)
    ;;                    (powerline-raw (char-to-string #x2502) position-face))
    ;;                  (if (>= (current-column) 80)
    ;;                      (powerline-raw "%3c" 80col-face 'l)
    ;;                    (powerline-raw "%3c" position-face 'l))
    ;;                  (if (>= (current-column) 80)
    ;;                      (powerline-raw " " 80col-face)
    ;;                    (powerline-raw " " position-face))
    ;;                  (if (>= (current-column) 80)
    ;;                      (funcall separator-left 80col-face percentage-face)
    ;;                    (funcall separator-left position-face percentage-face))
    ;;                  (powerline-raw " " percentage-face)
    ;;                  (powerline-raw "%6p" percentage-face 'r)))
  
    ;;            ;; the left side
    ;;            (lhs (list
    ;;                  ;; this is the modified status indicator
    ;;                  (cond (buffer-read-only
    ;;                         (powerline-raw "  " read-only-face))
    ;;                        ((buffer-modified-p)
    ;;                         ;; do not light up when in an interactive buffer. Set
    ;;                         ;; ML-INTERACTIVE? in hooks for interactive buffers.
    ;;                         (if (not (bound-and-true-p ml-interactive?))
    ;;                             (powerline-raw "  " modified-face)
    ;;                           (powerline-raw "  " unmodified-face)))
    ;;                        ((not (buffer-modified-p))
    ;;                         (powerline-raw "  " unmodified-face)))
    ;;                  (cond (buffer-read-only
    ;;                         (powerline-raw (concat (char-to-string #xe0a2) " ") read-only-face 'l))
    ;;                        ((buffer-modified-p)
    ;;                         (if (not (bound-and-true-p ml-interactive?))
    ;;                             (powerline-raw (concat (char-to-string #x2621) " ") modified-face 'l)
    ;;                           (powerline-raw (concat (char-to-string #x259e) " ") unmodified-face 'l)))
    ;;                        ((not (buffer-modified-p))
    ;;                         (powerline-raw (concat (char-to-string #x26c1) " ") unmodified-face 'l)))
    ;;                  (cond (buffer-read-only
    ;;                         (funcall separator-right read-only-face filename-face))
    ;;                        ((buffer-modified-p)
    ;;                         (if (not (bound-and-true-p ml-interactive?))
    ;;                             (funcall separator-right modified-face filename-face)
    ;;                           (funcall separator-right unmodified-face filename-face)))
    ;;                        ((not (buffer-modified-p))
    ;;                         (funcall separator-right unmodified-face filename-face)))
    ;;                  ;; remote indicator
    ;;                  (when (file-remote-p default-directory)
    ;;                    (powerline-raw (concat " " (char-to-string #x211b)) remote-face))
    ;;                  ;; filename and mode info
    ;;                  (powerline-buffer-id filename-face 'l)
    ;;                  (powerline-raw " " filename-face)
    ;;                  (funcall separator-left filename-face major-mode-face)
    ;;                  ;; do not need mode info when in ansi-term
    ;;                  (unless (bound-and-true-p show-dir-in-mode-line?)
    ;;                    (powerline-major-mode major-mode-face 'l))
    ;;                  (unless (bound-and-true-p show-dir-in-mode-line?)
    ;;                    (powerline-process major-mode-face 'l))
    ;;                  ;; show a flag if in line mode in terminal
    ;;                  (when (and (bound-and-true-p show-dir-in-mode-line?) (term-in-line-mode))
    ;;                    (powerline-raw (concat (char-to-string #x2691) " Line") major-mode-face))
    ;;                  (powerline-raw " " major-mode-face)
    ;;                  ;; little trick to move the directory name to the mode line
    ;;                  ;; when inside of emacs set SHOW-DIR-IN-MODE-LINE? to enable
    ;;                  (if (bound-and-true-p show-dir-in-mode-line?)
    ;;                      (when (not (file-remote-p default-directory))
    ;;                        (powerline-raw (shorten-directory default-directory 45)
    ;;                                       shell-dir-face))
    ;;                    (powerline-minor-modes minor-mode-face 'l))
    ;;                  (unless (bound-and-true-p show-dir-in-mode-line?)
    ;;                    (dennis-powerline-narrow major-mode-face 'l)))))
  
    ;;       ;; concatenate it all together
    ;;       (concat (powerline-render lhs)
    ;;               (powerline-fill face1 (powerline-width rhs))
    ;;               (powerline-render rhs))))))
      )
#+end_src

* Global keybinding
I'll be stealing a bunch of these from [[https://github.com/bbatsov/prelude/blob/master/README.md#keymap][Prelude]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; Font sizea
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
					  ; Start eshell or switch to it if it's active.
  (global-set-key (kbd "C-x m") 'eshell)

  ;; Start a new eshell even if one is active.
  (global-set-key (kbd "C-x M")
		  (lambda () (interactive) (eshell t)))
#+end_src

#+RESULTS:

* SSH
[[http://sachachua.com/blog/][Sacha Chua]] did the work for me [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgb6b973e][here]]. This makes magit work nicely.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my/ssh-refresh ()
    "Reset the environment variable SSH_AUTH_SOCK"
    (interactive)
    (let (ssh-auth-sock-old (getenv "SSH_AUTH_SOCK"))
      (setenv "SSH_AUTH_SOCK"
              (car (split-string
                    (shell-command-to-string
                     "ls -t $(find /tmp/ssh-* -user $USER -name 'agent.*' 2> /dev/null)"))))
      (message
       (format "SSH_AUTH_SOCK %s --> %s"
               ssh-auth-sock-old (getenv "SSH_AUTH_SOCK")))))

  (my/ssh-refresh)
#+end_src

#+RESULTS:
: SSH_AUTH_SOCK nil --> /tmp/ssh-NTkRr2af1PnJ/agent.2777

* UI stuff
The hippest emacsers don't need menus, toolbars, or scrollbars. But I
don't either.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq sentence-end-double-space nil)
  (fset 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+end_src

#+RESULTS:
: 1

I like an obnoxious, bright, blinking cursor. This adds to it. Cool.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package anzu
    :ensure t
    :defer t
    :bind
    (([remap query-replace]        . anzu-query-replace)
     ([remap query-replace-regexp] . anzu-query-replace-regexp))
    :config
    (setq anzu-mode-lighter ""
          anzu-deactivate-region t
          anzu-search-threshold 1000
          anzu-replace-threshold 50
          anzu-replace-to-string-separator " => ")
    (global-anzu-mode +1))
#+end_src

Try this once; never look back.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package avy
    :ensure t
    :defer t
    :bind ("C-c j" . avy-goto-word-or-subword-1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package diff-hl
    :ensure t
    :defer t
    :config
    (diff-hl-mode 1))
#+end_src

#+RESULTS:
: t

Likewise.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package expand-region
    :ensure t
    :defer t
    :bind ("C-=" . er/expand-region)
    :config
    (delete-selection-mode t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package imenu-anywhere
    :ensure t
    :defer t
    :bind ("C-." . helm-imenu-anywhere))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package move-text
    :defer t
    :bind (
           ;; ("M-up"   . move-text-up)
           ;; ("M-down" . move-text-down)
           ))
#+end_src


I kinda don't like it creating a big frame, but the visualization
helps a bit, I think.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package undo-tree
    :ensure t
    :defer t
    :bind (("C-x u" . undo-tree-visualize))
    :config
    (setq undo-tree-history-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq undo-tree-auto-save-history t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package volatile-highlights
    :ensure t
    :defer t
    :config (volatile-highlights-mode t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package which-key
    :ensure t
    :defer t
    :config (which-key-mode))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package zop-to-char
    :ensure t
    :defer t
    :bind ([remap zap-to-char] . zop-to-char))
#+end_src

I think this is a nice theme, but I could never get my tweaks to stick
when I used Prelude. I'm moody about themes. I'm sure I'll be
switching from this to wombat, to leuven, to
smart-modeline-respectful, /etc/.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package zenburn-theme
    :ensure t
    :config
    (set-cursor-color "red")
    (blink-cursor-mode 1)
    ;; maybe it's a bad idea to put this here.
    (custom-set-faces
     '(font-lock-comment-face ((t (:foreground "gray38" :slant italic))))
     '(default ((t (:inherit nil :stipple nil :background "#3F3F3F" :foreground "#DCDCCC" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight medium :height 100 :width medium :foundry "PfEd" :family "Source Code Pro"))))))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))

  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  (global-auto-revert-mode t)
#+end_src

This ruined me. I can no longer get along without [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][this]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
	(forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
	(move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+end_src

Yet another [[http://emacsredux.com/blog/2013/03/30/kill-other-buffers/][gold nugget]] from [[http://emacsredux.com/blog/2013/03/30/kill-other-buffers/][Emacs Redux]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun kill-other-buffers ()
    "Kill all buffers but the current one.
    Don't mess with special buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
	(kill-buffer buffer))))

  (global-set-key (kbd "C-c k") 'kill-other-buffers)
#+end_src

#+RESULTS:
: kill-other-buffers
** Windows specific
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (if (string-equal system-type "windows-nt") (progn
                                                (defun align-set-size ()
                                                  "Stretch from bottom to top."
                                                  (interactive)
                                                  (if (string-equal (window-system) "w32")
                                                      (set-frame-size (selected-frame) 680 1050 t)))
  
                                                (defun align-window ()
                                                  "Fix window positioning."
                                                  (interactive)
                                                  (if (equal (getenv "emacs_alignment") "right")
                                                      (align-window-right)
                                                    (align-window-left))
                                                  ;; (align-set-size)
                                                  )
  
                                                (defun align-window-left ()
                                                  "Align window to left window edge."
                                                  (interactive)
                                                  (set-frame-position (selected-frame) 1 340)
                                                  ;;(set-frame-position (selected-frame) 2587 494)
                                                  )
  
                                                (defun align-window-right ()
                                                  "Align window to right window edge."
                                                  (interactive)
                                                  ;;  (set-frame-position (selected-frame) -1 320)
                                                  (set-frame-position (selected-frame) 1921 0)
                                                  (align-set-size))
  
                                                (defvar kc:mprPattern "Mr"
                                                  "Send2Mach files aresearched for this pattern.")
  
                                                (defun kc:mprCheck ()
                                                  "Check for undeployed machine programs."
                                                  (interactive)
                                                  (find-grep-dired "O:/CNCDXF/WEEKE/SEND2MACH"  kc:mprPattern))
  
                                                (fset 'remember-parens
                                                      "\C-so\C-m(\C-e)\274")
  
                                                ;; (fset 'export-weeke-flatbed-programs
                                                ;;    [?% ?m ?. ?* ?m ?p ?r return ?C ?\C-a ?\C-k ?u ?: ?/ return ?R ?\M-b ?\C-k ?S ?T ?E ?R tab return ?g])
  
                                                ;; (defun ewfp ()
                                                ;;   ""
                                                ;;   (interactive)
                                                ;;   (if (and (file-exists-p "U:/"))
                                                ;;       (execute-kbd-macro (symbol-function 'export-weeke-flatbed-programs))
                                                ;;     (message "Not the \"*Find*\" buffer, or BHP008 is not online.")) )
  
                                                (defvar kc:drives '("G" "H" "K" "O" "R" "S" "Y")
                                                  "Network drives.")
  
                                                (defun kc:off-to-the-u (export-machine-backup-dir &optional u)
                                                  "Exports, then backs up machine programs (only to `U:/' right now) from a Dired `*Find*' buffer."
                                                  (interactive "DBackup directory: ")
                                                  (if (not (file-exists-p "U:/"))
                                                      (progn
                                                        (ding)
                                                        (message "BHP008 is currently offline."))
  
                                                    (progn
                                                      (loop for n in (dired-get-marked-files) do
                                                            (copy-file n "U:/" t)
                                                            (message (format "Copying `%s'" n)))
                                                      (if (y-or-n-p "Backup files? ")
                                                          (progn
                                                            (loop for n in (dired-get-marked-files) do
                                                                  (rename-file n export-machine-backup-dir t))
                                                            (message (format "Backed up to `%s'" export-machine-backup-dir))
                                                            (revert-buffer))
                                                        (message "Not backing up.")))))
  
                                                (defun kc:off-to-the-machines (export-machine-backup-dir &optional u)
                                                  ""
                                                  (interactive "DBackup directory: ")
                                                  (setq kc:drives '("I" "J" "L" "M" "N" "T"))
                                                  (loop for n in (dired-get-marked-files) do
                                                        (loop for m in kc:drives do
                                                              (if (file-exists-p (concat m ":\\"))
                                                                  (progn
                                                                    (copy-file n (concat m ":\\") t)
                                                                    (message (format "Copying %s to %s" n (concat m ":\\")))))))
                                                  (if (y-or-n-p "Backup files? ")
                                                      (progn
                                                        (loop for n in (dired-get-marked-files) do
                                                              (rename-file n export-machine-backup-dir t))
                                                        (message (format "Backed up to `%s'" export-machine-backup-dir))
                                                        (revert-buffer))
                                                    (message "Not backing up.")))
  
  
                                                ;; (fset 'fix-Q1s
                                                ;;    [?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?s ?t ?r ?i ?n ?g return ?Q ?3 return ?Q ?1 return])
  
                                                (defun kc:make-all-Qs-Q1 ()
                                                  "When there is a single column of parts, Striker starts from Q3.  I made this function for such occasions.  It's bound to C-c q."
                                                  (interactive)
                                                  (setq file-to-delete (concat buffer-file-name "~"))
                                                  (if (and
                                                       (> (length file-to-delete) 1)
                                                       (not (string-match "dir.*" (prin1-to-string major-mode)))
                                                       (string-match "Gcode-.*" (prin1-to-string major-mode))
                                                       (not (eq (search-forward-regexp "Q3") nil)))
                                                      (progn
                                                        (beginning-of-buffer)
                                                        (replace-string "Q3" "Q1")
                                                        (save-buffer)
                                                        (kill-buffer (current-buffer))
                                                        (if (file-exists-p file-to-delete)
                                                            (delete-file file-to-delete t)
                                                          (message "Something isn't right"))
                                                        (message "Q3s replaced."))
                                                    (progn
                                                      (message "We didn't find any Q3s.")
                                                      (if (string-match "text.*" (prin1-to-string major-mode))
                                                          (kill-buffer (current-buffer))))))
  
  
  
                                                (defun kc:check-for-network-drives ()
                                                  "Checks which drives are online and offline."
                                                  (interactive)
                                                  (setq drives kc:drives)
                                                  (setq online-drives ())
                                                  (setq offline-drives ())
                                                  (progn
                                                    (while drives
                                                      (if (file-exists-p (concat (car drives) ":/"))
                                                          (add-to-list 'online-drives (car drives) t)
                                                        (add-to-list 'offline-drives (car drives) t))
                                                      (setq drives (cdr drives)))
                                                    (message (prin1-to-string online-drives))))
  
                                                (defun eshell/op (file)
                                                  "Invoke (w32-shell-execute \"Open\" file) and substitute
      slashes for backslashes"
                                                  (w32-shell-execute "Open"
                                                                     (subst-char-in-string ?\\ ?/ (expand-file-name file)))
                                                  nil)
  
                                                (defun run-bgbd-command ()
                                                  ""
                                                  (let ((command-in-file "C:\\Users\\juntunenkc\\Dropbox\\.bgbd")
                                                        (command-out-file "C:/Users/juntunenkc/Dropbox/out.bgbd")
                                                        (command-input "")
                                                        (command-output ""))
                                                    (if (file-exists-p "C:/Users/juntunenkc/Dropbox/.bgbd")
                                                        (progn
                                                          (setq command-input (shell-command-to-string (concat "powershell cat " command-in-file)))
                                                          (message "Here comes a temp-buffer.")
                                                          (with-temp-buffer
                                                            (setq command-output (shell-command-to-string command-input))
                                                            (insert command-output)
                                                            (write-file command-out-file)
                                                            (kill-buffer (current-buffer)))
                                                          (delete-file command-in-file t))
                                                      (message (format "%s not found." command-in-file)))))
  
                                                (defun bgbd ()
                                                  ""
                                                  (interactive)
                                                  (if (file-exists-p "C:/Users/juntunenkc/Dropbox/.bgbd")
                                                      (delete-file "C:/Users/juntunenkc/Dropbox/.bgbd"))
                                                  (setq bgbd-timer (run-at-time "1 sec" 15
                                                                                (lambda ()
                                                                                  (if (file-exists-p "C:/Users/juntunenkc/Dropbox/.bgbd")
                                                                                      (progn
                                                                                        (run-bgbd-command))
                                                                                    (progn
                                                                                      ))))))
  
                                                (defun bgbd-stop ()
                                                  ""
                                                  (interactive)
                                                  (cancel-timer bgbd-timer))
  
                                                ;; (fset 'take-proc-snapshot
                                                ;;       [?g ?\C-x ?h ?\M-w ?\C-x ?\C-f ?. ?. ?/ ?. ?. ?/ ?D ?r ?o tab ?p ?r ?o ?c ?. ?s ?n ?a ?p ?s ?o backspace ?h ?o ?t return ?\C-y ?\C-x ?\C-s ?\C-x ?k return])
  
                                                ;; (setq proc-snapshot-timer
                                                ;;       (run-at-time "1 sec" (* 60 60)
                                                ;;                    (lambda ()
                                                ;;                      (progn
                                                ;;                        (delete-file "C:/Users/juntunenkc/Dropbox/proc.snapshot" nil)
                                                ;;                        (switch-to-buffer "*Proced*")
                                                ;;                        (execute-kbd-macro 'take-proc-snapshot))
                                                ;;                      )
                                                ;;                    ))
  
                                                ;; (cancel-timer proc-snapshot-timer)
  
  
  ;;; Setting keys
                                                ;; (global-set-key "\C-ce" 'kc:off-to-the-machines)
                                                ;; (global-set-key "\C-cd" 'kc:check-for-network-drives)
                                                ;; (global-set-key "\C-cq" 'kc:make-all-Qs-Q1)
                                                ;; (global-set-key "\C-cm" 'kc:mprCheck)
                                                ;; (global-set-key "\C-c(" 'remember-parens)
  
                                                ;; (defun kc:test ()
                                                ;;   ""
                                                ;;   (interactive)
                                                ;;   (progn
                                                ;;     (beginning-of-buffer)
                                                ;;     (save-excursion
                                                ;;     (if (not (eq (search-forward-regexp "Q1") nil))
                                                ;;         (message "stuff!")))))
                                                (defun kc/kill-vistaepx64 ()
                                                  ""
                                                  (interactive)
                                                  (mapc 'kc/sub-kill-vstaepx64 (list-system-processes)))
  
                                                (defun kc/sub-kill-vstaepx64 (args)
                                                  ""
                                                  (if (string= "vsta_epx64.exe" (cdr (assoc 'comm (process-attributes args))))
                                                      (if (> args 0)
                                                          (signal-process args 9))))
                                                (align-window)
                                                ))
#+end_src
* Jabber
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package jabber
    :ensure t
    :defer t
    :bind ("C-x j c" . jabber-connect-all)
    :config
    (setq jabber-account-list
          '((""
             (:network-server . "talk.google.com")
             (:port . 5222)
             (:connection-type . starttls)))))
  
#+end_src
* Misc functions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun kc:list-connections ()
  "Lists all Internet IPv4 connections. Ignores intranet connections."
  (interactive)
  (let ((kc:lc-column (cond ((string= system-type "windows-nt") 4)
                            (string= system-type "gnu/linux") 5))
        (kc:lc-command (cond ((string= system-type "windows-nt") "netstat -n -p TCP")
                             ((string= system-type "gnu/linux") "ss -4 -t"))))
    (remove-if
     (lambda (x) (or (string-match-p "10.10" x) (string= "127.0.0.1" x)))
     (mapcar
      (lambda (x)
        (cond ((string= system-type "windows-nt") (nth 4 x))
              (string= system-type "gnu/linux") (nth 5 x)))
      (mapcar
       (lambda (x) (split-string x ":\\| \+"))
       (remove-if
        (lambda (x) (if (and (string-match-p "STAB" x)) nil t))
        (split-string (shell-command-to-string kc:lc-command) "\n")))))))
#+end_src
