#+Title: My emacs config
* Prolegomena
There are things I like and things I don't like about [[https://github.com/bbatsov/prelude][Prelude]]. The
things I like, I really, really like. I want to reimplement them all
with Wiegley's [[https://github.com/jwiegley/use-package][use-package]] gizmo.

Also:
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq lexical-binding t)
#+end_src

* Custom file
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
(load custom-file t)
#+end_src

#+RESULTS:
: /home/juntunenkc/.emacs.d/custom.el
* Env stuff
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defvar at-home (not (and (string= system-type "windows-nt")
			    (string= window-system "w32")))
    "If this is a Windows machine, it's probably not mine")

  (defvar dropbox-dir "~/Dropbox" "My Dropbox directory.")

  (setq user-full-name    "K. C. Juntunen"
	user-mail-address "juntunen.kc@gmail.com"
	dropbox-dir       (if (not at-home)
			      "~/../../Dropbox/"
			    "~/Dropbox/"))
#+end_src
* Install packages
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(setq package-user-dir
      (expand-file-name "elpa" (expand-file-name "~/.emacs.d")))
(package-initialize)

(unless inhibit-startup-screen (package-refresh-contents))
#+end_src

Anything that needs to be =require='d before =use-package= goes here.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defvar my/packages
  '(bind-key
    diminish
    use-package)
  "A list of packages to ensure are installed at launch.")
#+end_src
Elisp is so cool.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(mapc #'(lambda (package) (unless (package-installed-p package) (package-install package))) my/packages)

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
#+end_src

* Code
** General
I need to learn to make this not stomp on eldoc like it does sometimes.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck
  :ensure t
  :defer t
  :config
  (add-hook 'python-mode-hook 'flycheck-mode))

(use-package nlinum
  :ensure t
  :config
  (add-hook 'python-mode-hook 'nlinum-mode))
#+end_src
The more the merrier. I eventually want it to be a little less than
global. It's generally no help in eshell, jabber, or ERC.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;; (defvar company-backends)
(use-package company-anaconda
  :ensure t
  :defer t)

(use-package company-shell
  :ensure t
  :defer t)

(use-package company
  :ensure t
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (add-hook 'prog-mode-hook 'company-mode)
  (use-package company-irony :ensure t :defer t)
  (setq company-idle-delay              0
        company-minimum-prefix-length   2
        company-show-numbers            t
        company-tooltip-limit           20
        company-dabbrev-downcase        nil
        company-tooltip-flip-when-above t
        company-backends                '((company-anaconda
                                           company-bbdb
                                           company-elisp
                                           company-gtags
                                           company-irony))))

#+end_src
This is always helpful.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'lisp-mode-hook 'smartparens-strict-mode)
    (add-hook 'lisp-interaction-mode-hook 'smartparens-strict-mode)
    (sp-use-smartparens-bindings))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(whitespace-mode 1)
(setq whitespace-line-column 80) ;; limit line length
(setq whitespace-style '(face tabs empty trailing lines-tail))
#+end_src
** Build
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package cmake-font-lock
  :ensure t
  :defer t)
(use-package cmake-ide
  :ensure t
  :defer t)
(use-package cmake-mode
  :ensure t
  :defer t)
(use-package cmake-project
  :ensure t
  :defer t)


#+end_src
** C/C++
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package irony
  :ensure t
  :defer t
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  :config
  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+end_src

** Python
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package anaconda-mode
  :ensure t
  :defer t
  :commands anaconda-mode
  :diminish anaconda-mode
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'eldoc-mode)))

#+end_src

** Javascript
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package tern
  :if at-home
  :ensure t
  :defer t
  :init
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (eval-after-load 'tern
    '(progn
       (require 'tern-auto-complete)
       (tern-ac-setup))))
#+end_src
** Revision control
*** Magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(unless (version< emacs-version "24.4")
  (use-package magit
    :ensure t
    :defer t
    :bind (("C-x g" . magit-status)
           ("C-x M-g" . magit-dispatch-popup))))
#+end_src
* Helm
I dig helm. I don't care much for ido.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package helm
  :ensure t
  :defer t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay                       0.0
          helm-input-idle-delay                 0.01
          helm-yas-display-key-on-candidate     t
          helm-quick-update                     t
          helm-M-x-requires-pattern             nil
          helm-ff-skip-boring-files             t
          helm-split-window-in-side-p           t
          helm-buffers-fuzzy-matching           t
          helm-move-to-line-cycle-in-source     t
          helm-ff-search-library-in-sexp        t
          helm-ff-file-name-history-use-recentf t)
    (helm-mode))
  :bind (("M-x"     . helm-M-x)
         ("C-x C-m" . helm-M-x)
         ("M-y"     . helm-show-kill-ring)
         ("C-x b"   . helm-mini)
         ("C-x C-f" . helm-find-files)
         ("C-h f"   . helm-apropos)
         ("C-h r"   . helm-info-emacs)
         ("C-h C-l" . helm-locate-library)
         :map helm-command-map
         ("o"       . helm-occur)
         ("g"       . helm-do-grep)
         ("C-c w"   . helm-wikipedia-suggest)
         ("SPC"     . helm-all-mark-rings)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package helm-descbinds
  :ensure t
  :defer t
  :bind (("C-h b" . helm-descbinds)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package helm-projectile
  :if at-home
  :ensure t
  :defer t)

#+end_src
* Org Mode
On org-agenda-files, the documentation says:
#+begin_quote
If the value of the variable is not a list but a single file name, then
the list of agenda files is actually stored and maintained in that file, one
agenda file per line.  In this file paths can be given relative to
‘org-directory’.  Tilde expansion and environment variable substitution
are also made.
#+end_quote
Maybe I'll do that sometime.

Way down there is =bh-org-mode-file=. The =bh= is for [[http://doc.norang.ca/org-mode.html][Bernt Hansen]].
The idea is to have a separate org-config, because it's so huge. My
Emacs loads in only a few seconds without this.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org
  :init (setq org-directory (concat dropbox-dir "org/")
              agenda-dir (concat org-directory "agenda/"))
  :load-path ("~/git/org-mode/lisp" "~/git/org-mode/contrib/lisp")
  :bind (("C-c a"     . org-agenda)
         ("C-c C-w"   . org-refile)
         ("C-c c"     . org-capture)
         ("C-c b"     . org-iswitchb)
         ("<M-f7>"    . visual-line-mode)
         ;; Bernt Hansen's keys.
         ("<f12>"     . org-agenda)
         ("<f5>"      . bh/org-todo)
         ("<S-f5>"    . bh/widen)
         ("<f7>"      . bh/set-truncate-lines)
         ("<f8>"      . org-cycle-agenda-files)
         ("<f9> <f9>" . bh/show-org-agenda)
         ("<f9> b"    . bbdb)
         ("<f9> c"    . calendar)
         ("<f9> f"    . boxquote-insert-file)
         ("<f9> g"    . gnus)
         ("<f9> h"    . bh/hide-other)
         ("<f9> n"    . bh/toggle-next-task-display)
         ("<f9> I"    . bh/punch-in)
         ("<f9> O"    . bh/punch-out)
         ("<f9> o"    . bh/make-org-scratch)
         ("<f9> r"    . boxquote-region)
         ("<f9> s"    . bh/switch-to-scratch)
         ("<f9> t"    . bh/insert-inactive-timestamp)
         ("<f9> T"    . bh/toggle-insert-inactive-timestamp)
         ("<f9> v"    . visible-mode)
         ("<f9> l"    . org-toggle-link-display)
         ("<f9> SPC"  . bh/clock-in-last-task)
         ("C-<f9>"    . previous-buffer)
         ("M-<f9>"    . org-toggle-inline-images)
         ("C-x n r"   . narrow-to-region)
         ("C-<f10>"   . next-buffer)
         ("<f11>"     . org-clock-goto)
         ("C-<f11>"   . org-clock-in)
         ("C-s-<f12>" . bh/save-then-publish)
         ("C-c c"     . org-capture))
  :defer t
  :config
  (let ((bh-org-mode-file (cond ((string= system-type "windows-nt")
                                 (expand-file-name "~/git/emacs-config/org-mode.el"))
                                ((string= system-type "gnu/linux")
                                 (expand-file-name "~/git/emacs-config/org-mode.org"))))
        (org-config-load-command (cond ((string= system-type "windows-nt")
                                        'load-file)
                                       ((string= system-type "gnu/linux")
                                        'org-babel-load-file))))
    (setq org-agenda-files
          (delq nil
                (mapcar (lambda (x) (and (file-exists-p x) x))
                        (directory-files
                         (expand-file-name agenda-dir) t org-agenda-file-regexp))))
    ;; load org config
    (if (file-exists-p bh-org-mode-file)
        (funcall org-config-load-command bh-org-mode-file))))

(use-package org-id)

(use-package org-habit)

(use-package org-mobile
  :config
  (setq org-mobile-directory (concat dropbox-dir "orgmobile/")
        org-mobile-inbox-for-pull (concat dropbox-dir "mobile-org/inbox.org")))

#+end_src

#+RESULTS:
: t

* Powerline
[[https://ogbe.net/][Dennis Ogbe]] has the [[https://ogbe.net/emacsconfig.html#orgheadline24][coolest]] mode-line I've ever seen. So I cribbed his
code. Unfortunately, for me, it gets super fat on some frames. That's
just unacceptible. :-(
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package powerline
  :ensure t
  :config
  (powerline-default-theme))
#+end_src

#+results:
: t

* Global keybinding
I'll be stealing a bunch of these from [[https://github.com/bbatsov/prelude/blob/master/README.md#keymap][Prelude]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; Font sizea
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
					  ; Start eshell or switch to it if it's active.
  (global-set-key (kbd "C-x m") 'eshell)

  ;; Start a new eshell even if one is active.
  (global-set-key (kbd "C-x M")
		  (lambda () (interactive) (eshell t)))
#+end_src

#+RESULTS:

* SSH
[[http://sachachua.com/blog/][Sacha Chua]] did the work for me [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgb6b973e][here]]. This makes magit work nicely.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my/ssh-refresh ()
    "Reset the environment variable SSH_AUTH_SOCK"
    (interactive)
    (let (ssh-auth-sock-old (getenv "SSH_AUTH_SOCK"))
      (setenv "SSH_AUTH_SOCK"
              (car (split-string
                    (shell-command-to-string
                     "ls -t $(find /tmp/ssh-* -user $USER -name 'agent.*' 2> /dev/null)"))))
      (message
       (format "SSH_AUTH_SOCK %s --> %s"
               ssh-auth-sock-old (getenv "SSH_AUTH_SOCK")))))

  (my/ssh-refresh)
#+end_src

#+RESULTS:
: SSH_AUTH_SOCK nil --> /tmp/ssh-NTkRr2af1PnJ/agent.2777

* UI stuff

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package unicode-fonts
  :ensure t)

(use-package emojify
  :ensure t
  :config
  (setq emojify-display-style 'unicode)
  (add-hook 'jabber-chat-mode-hook 'emojify-mode))
#+end_src

Found on this [[http://www.lunaryorn.com/posts/center-buffer-text-in-emacs.html][blog]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package visual-fill-column
  :ensure t
  :defer t
  :bind (("C-c t v" . visual-fill-column-mode))
  ;; :init
  ;; (dolist (hook '(visual-line-mode-hook
  ;;                 prog-mode-hook
  ;;                 text-mode-hook))
  ;;   (add-hook hook #'visual-fill-column-mode))
  :config (setq-default visual-fill-column-center-text t
                        visual-fill-column-fringes-outside-margins nil))

#+end_src

The hippest emacsers don't need menus, toolbars, or scrollbars. But I
don't either.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq sentence-end-double-space nil)
(fset 'yes-or-no-p 'y-or-n-p)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)
#+end_src

#+RESULTS:
: 1

I like an obnoxious, bright, blinking cursor. This adds to it. Cool.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package beacon
  :ensure t
  :config (beacon-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package anzu
  :ensure t
  :defer t
  :bind
  (([remap query-replace]        . anzu-query-replace)
   ([remap query-replace-regexp] . anzu-query-replace-regexp))
  :config
  (setq anzu-mode-lighter ""
        anzu-deactivate-region t
        anzu-search-threshold 1000
        anzu-replace-threshold 50
        anzu-replace-to-string-separator " => ")
  (global-anzu-mode +1))
#+end_src

Try this once; never look back.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package avy
  :ensure t
  :defer t
  :bind ("C-c j" . avy-goto-word-or-subword-1))
#+end_src

Somewhere it seemed like =M-p= was the recommended binding. This conflicts with up/down scroll with
company, =previous-command= in eshell and erc, =magit-section-backward-sibling=, and probably lots
of other things. Since my plan is to stop using =other-window=, not necessarily =C-x o=, I'll just
rebind it.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package ace-window
  :ensure t
  :defer t
  :bind ("C-x o" . ace-window)
  )
#+end_src

This feature is useful in VisualStudio, so I'll have it in Emacs too.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package diff-hl
  :ensure t
  :defer t
  :config
  (diff-hl-mode 1))
#+end_src

#+RESULTS:
: t

Likewise.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package expand-region
  :ensure t
  :defer t
  :bind ("C-=" . er/expand-region)
  :config
  (delete-selection-mode t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package imenu-anywhere
  :ensure t
  :defer t
  :bind ("C-." . helm-imenu-anywhere))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package move-text
  :ensure t
  :defer t
  :bind
  ("M-up"   . move-text-up)
  ("M-down" . move-text-down))
#+end_src


I kinda don't like it creating a big frame, but the visualization
helps a bit, I think.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package undo-tree
  :ensure t
  :defer t
  :bind (("C-x u" . undo-tree-visualize))
  :config
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package volatile-highlights
  :ensure t
  :defer t
  :config (volatile-highlights-mode t))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package which-key
  :ensure t
  :defer t
  :config (which-key-mode))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package zop-to-char
  :ensure t
  :defer t
  :bind ([remap zap-to-char] . zop-to-char))
#+end_src

I think =zenburn-theme= is a nice theme, but I could never get my tweaks to stick
when I used Prelude. I'm moody about themes. I'm sure I'll be
switching from this to wombat, to leuven, to
smart-modeline-respectful, /etc/.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package leuven-theme
  :if at-home
  :ensure t
  :config
  (setq blink-cursor-interval .125
	blink-cursor-blinks 10000
	powerline-default-separator 'zigzag)
  (set-cursor-color "red")
  (blink-cursor-mode 1))

(use-package abyss-theme
  :if (not at-home)
  :ensure t
  :config
  (setq blink-cursor-interval .125
	blink-cursor-blinks 10000
	powerline-default-separator 'wave)
  (set-cursor-color "yellow")
  (blink-cursor-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(global-auto-revert-mode t)
(add-hook 'dired-mode-hook '(lambda ()
                              (define-key dired-mode-map "r" 'revert-buffer)))
#+end_src

This ruined me. I can no longer get along without [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][this]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+end_src

Yet another [[http://emacsredux.com/blog/2013/03/30/kill-other-buffers/][gold nugget]] from [[http://emacsredux.com/blog/2013/03/30/kill-other-buffers/][Emacs Redux]].
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun kill-other-buffers ()
  "Kill all buffers but the current one.
  Don't mess with special buffers."
  (interactive)
  (dolist (buffer (buffer-list))
    (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
      (kill-buffer buffer))))

(global-set-key (kbd "C-c k") 'kill-other-buffers)
#+end_src

#+RESULTS:
: kill-other-buffers

Today (<2016-10-28 Fri>), I thought it would be cool to make an =eval-and-replace= function. It
looked like this:
#+begin_src emacs-lisp :tangle no
(defun eval-and-replace (s-expression)
  ""
  (interactive "P")
  (let* ((result (eval-last-sexp s-expression)))
    (backward-kill-sexp)
    (insert (format "%S" result))))
#+end_src

Turns out Bozhidar Batsov already [[http://emacsredux.com/blog/2013/06/21/eval-and-replace/][made one]], and his is better, of course:
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(global-set-key (kbd "C-c e") 'eval-and-replace)
#+end_src

** Windows specific
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (if (not at-home)
      (progn
	(defun align-set-size ()
          "Stretch from bottom to top."
          (interactive)
          (if (string-equal (window-system) "w32")
              (set-frame-size (selected-frame) 680 1050 t)))

	(defun align-window ()
          "Fix window positioning."
          (interactive)
          (if (equal (getenv "emacs_alignment") "right")
              (align-window-right)
            (align-window-left))
          ;; (align-set-size)
          )

	(defun align-window-left ()
          "Align window to left window edge."
          (interactive)
          (set-frame-position (selected-frame) 1 340)
          ;;(set-frame-position (selected-frame) 2587 494)
          )

	(defun align-window-right ()
          "Align window to right window edge."
          (interactive)
          ;;  (set-frame-position (selected-frame) -1 320)
          (set-frame-position (selected-frame) 1921 0)
          (align-set-size))

	(defvar kc:mprPattern "Mr"
          "Send2Mach files aresearched for this pattern.")

	(defun kc:mprCheck ()
          "Check for undeployed machine programs."
          (interactive)
          (find-grep-dired "O:/CNCDXF/WEEKE/SEND2MACH"  kc:mprPattern))

	(fset 'remember-parens
              "\C-so\C-m(\C-e)\274")

	;; (fset 'export-weeke-flatbed-programs
	;;    [?% ?m ?. ?* ?m ?p ?r return ?C ?\C-a ?\C-k ?u ?: ?/ return ?R ?\M-b ?\C-k ?S ?T ?E ?R tab return ?g])

	;; (defun ewfp ()
	;;   ""
	;;   (interactive)
	;;   (if (and (file-exists-p "U:/"))
	;;       (execute-kbd-macro (symbol-function 'export-weeke-flatbed-programs))
	;;     (message "Not the \"*Find*\" buffer, or BHP008 is not online.")) )

	(defvar kc:drives '("G" "H" "K" "O" "R" "S" "Y")
          "Network drives.")

	(defun kc:off-to-the-u (export-machine-backup-dir &optional u)
          "Exports, then backs up machine programs (only to `U:/' right now) from a Dired `*Find*' buffer."
          (interactive "DBackup directory: ")
          (if (not (file-exists-p "U:/"))
              (progn
		(ding)
		(message "BHP008 is currently offline."))

            (progn
              (loop for n in (dired-get-marked-files) do
                    (copy-file n "U:/" t)
                    (message (format "Copying `%s'" n)))
              (if (y-or-n-p "Backup files? ")
                  (progn
                    (loop for n in (dired-get-marked-files) do
                          (rename-file n export-machine-backup-dir t))
                    (message (format "Backed up to `%s'" export-machine-backup-dir))
                    (revert-buffer))
		(message "Not backing up.")))))

	(defun kc:off-to-the-machines (export-machine-backup-dir &optional u)
          ""
          (interactive "DBackup directory: ")
          (setq kc:drives '("I" "J" "L" "M" "N" "T"))
          (loop for n in (dired-get-marked-files) do
		(loop for m in kc:drives do
                      (if (file-exists-p (concat m ":\\"))
                          (progn
                            (copy-file n (concat m ":\\") t)
                            (message (format "Copying %s to %s" n (concat m ":\\")))))))
          (if (y-or-n-p "Backup files? ")
              (progn
		(loop for n in (dired-get-marked-files) do
                      (rename-file n export-machine-backup-dir t))
		(message (format "Backed up to `%s'" export-machine-backup-dir))
		(revert-buffer))
            (message "Not backing up.")))


	;; (fset 'fix-Q1s
	;;    [?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?s ?t ?r ?i ?n ?g return ?Q ?3 return ?Q ?1 return])

	(defun kc:make-all-Qs-Q1 ()
          "When there is a single column of parts, Striker starts from Q3.  I made this function for such occasions.  It's bound to C-c q."
          (interactive)
	  (let* ((file-to-delete (concat buffer-file-name "~")))
	    (if (and
		 (> (length file-to-delete) 1)
		 (not (string-match "dir.*" (prin1-to-string major-mode)))
		 (string-match "Gcode-.*" (prin1-to-string major-mode))
		 (not (eq (search-forward-regexp "Q3") nil)))
		(progn
		  (goto-char (point-min))
		  (replace-string "Q3" "Q1")
		  (save-buffer)
		  (kill-buffer (current-buffer))
		  (if (file-exists-p file-to-delete)
		      (delete-file file-to-delete t)
		    (message "Something isn't right"))
		  (message "Q3s replaced."))
	      (progn
		(message "We didn't find any Q3s.")
		(if (string-match "text.*" (prin1-to-string major-mode))
		    (kill-buffer (current-buffer)))))))



	(defun kc:check-for-network-drives ()
          "Checks which drives are online and offline."
          (interactive)
	  (let* ((drives kc:drives)
		 (online-drives ())
		 (offline-drives ()))
	    (progn
	      (while drives
		(if (file-exists-p (concat (car drives) ":/"))
		    (add-to-list 'online-drives (car drives) t)
		  (add-to-list 'offline-drives (car drives) t))
		(setq drives (cdr drives)))
	      (message (prin1-to-string online-drives)))))

	(defun eshell/op (file)
          "Invoke (w32-shell-execute \"Open\" file) and substitute
      slashes for backslashes"
          (w32-shell-execute "Open"
                             (subst-char-in-string ?\\ ?/ (expand-file-name file)))
          nil)

	(defun run-bgbd-command ()
          ""
          (let ((command-in-file "C:\\Users\\juntunenkc\\Dropbox\\.bgbd")
		(command-out-file "C:/Users/juntunenkc/Dropbox/out.bgbd")
		(command-input "")
		(command-output ""))
            (if (file-exists-p "C:/Users/juntunenkc/Dropbox/.bgbd")
		(progn
                  (setq command-input (shell-command-to-string (concat "powershell cat " command-in-file)))
                  (message "Here comes a temp-buffer.")
                  (with-temp-buffer
                    (setq command-output (shell-command-to-string command-input))
                    (insert command-output)
                    (write-file command-out-file)
                    (kill-buffer (current-buffer)))
                  (delete-file command-in-file t))
              (message (format "%s not found." command-in-file)))))

	(defvar bgbd-timer ()
	  "A timer to be remembered so I can stop it.")
      
	(defun bgbd ()
          ""
          (interactive)
	  (if (file-exists-p "C:/Users/juntunenkc/Dropbox/.bgbd")
	      (delete-file "C:/Users/juntunenkc/Dropbox/.bgbd"))
	  (setq bgbd-timer (run-at-time "1 sec" 15
					(lambda ()
					  (if (file-exists-p "C:/Users/juntunenkc/Dropbox/.bgbd")
					      (progn
						(run-bgbd-command))
					    (progn
					      ))))))

	(defun bgbd-stop ()
          ""
          (interactive)
          (cancel-timer bgbd-timer))

	;; (fset 'take-proc-snapshot
	;;       [?g ?\C-x ?h ?\M-w ?\C-x ?\C-f ?. ?. ?/ ?. ?. ?/ ?D ?r ?o tab ?p ?r ?o ?c ?. ?s ?n ?a ?p ?s ?o backspace ?h ?o ?t return ?\C-y ?\C-x ?\C-s ?\C-x ?k return])

	;; (setq proc-snapshot-timer
	;;       (run-at-time "1 sec" (* 60 60)
	;;                    (lambda ()
	;;                      (progn
	;;                        (delete-file "C:/Users/juntunenkc/Dropbox/proc.snapshot" nil)
	;;                        (switch-to-buffer "*Proced*")
	;;                        (execute-kbd-macro 'take-proc-snapshot))
	;;                      )
	;;                    ))

	;; (cancel-timer proc-snapshot-timer)


  ;;; Setting keys
	;; (global-set-key "\C-ce" 'kc:off-to-the-machines)
	;; (global-set-key "\C-cd" 'kc:check-for-network-drives)
	;; (global-set-key "\C-cq" 'kc:make-all-Qs-Q1)
	;; (global-set-key "\C-cm" 'kc:mprCheck)
	;; (global-set-key "\C-c(" 'remember-parens)

	;; (defun kc:test ()
	;;   ""
	;;   (interactive)
	;;   (progn
	;;     (beginning-of-buffer)
	;;     (save-excursion
	;;     (if (not (eq (search-forward-regexp "Q1") nil))
	;;         (message "stuff!")))))
	(defun kc/kill-vistaepx64 ()
          ""
          (interactive)
          (mapc 'kc/sub-kill-vstaepx64 (list-system-processes)))

	(defun kc/sub-kill-vstaepx64 (args)
          ""
          (if (string= "vsta_epx64.exe" (cdr (assoc 'comm (process-attributes args))))
              (if (> args 0)
                  (signal-process args 9))))
	;; load .els I use in windows
	(progn
          (load-file "~/.emacs.d/site-lisp/w32-browser.el")
          (load-file "~/.emacs.d/site-lisp/cnc-opt.el")
          (define-key dired-mode-map "b" 'dired-w32-browser))
	;; put the window on the desired monitor
	(align-window)))
#+end_src
* Jabber
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package jabber
  :init
  (add-hook 'jabber-chat-mode-hook 'visual-line-mode)
  (add-hook 'jabber-chat-mode-hook 'variable-pitch-mode)
  :ensure t
  :defer t
  :bind ("C-x j c" . jabber-connect-all)
  :config
  (setq jabber-account-list
        '(("shfengoli@gmail.com"
           (:network-server . "talk.google.com")
           (:port . 5222)
           (:connection-type . starttls)))))

#+end_src
* Misc functions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun kc:update-mobile ()
    ""
    (interactive)
    (if (and (functionp 'org-mobile-push)
             (functionp 'org-mobile-pull))
        (progn
          (org-mobile-push)
          (org-mobile-pull)
          (save-some-buffers t)
          (if (functionp 'kill-other-buffers)
              (kill-other-buffers)))))

  (defun kc:list-connections ()
    "Lists all Internet IPv4 connections. Ignores intranet connections."
    (interactive)
    (let ((kc:lc-column
           (cond ((string-equal system-type "windows-nt") 4)
                 ((string-equal system-type "gnu/linux") 5))
           )
          (kc:lc-command
           (cond ((string-equal system-type "windows-nt") "netstat -n -p TCP")
                 ((string-equal system-type "gnu/linux") "ss -4 -t"))
           ))
      (remove-if (lambda (x) (or (string-match-p "10.10" x)
                                 (string-match-p "127.0.0.1" x)))
                 (mapcar
                  (lambda (x) (nth kc:lc-column x))
                  (mapcar
                   (lambda (x) (split-string x ":\\| \+"))
                   (remove-if
                    (lambda (x) (if (and (string-match-p "STAB" x)) nil t))
                    (split-string (shell-command-to-string kc:lc-command) "\n")))))))

  (defun get-office-temp-from-thingspeak ()
    "Get temperature value."
    (let* ((channel "100117")
          (th-url (concat "http://api.thingspeak.com/channels/" channel "/feeds.xml?results=1"))
          (b nil)
          (temp 0.0))
      (save-excursion
      (setq temp (string-to-number
                  (caddr
                   (assq 'field6
                         (assq 'feed
                               (assq 'feeds
                                     (cddar
                                      (progn
                                        (setq b (url-retrieve-synchronously th-url))
                                        (switch-to-buffer b)
                                        (xml-parse-region (point-min) (point-max)))))))))))
      (kill-buffer b)
      temp))

  (defun return-temp ()
    "Returns office temperature formated as a nice string."
    (interactive)
    (format "%.1f°" (get-office-temp-from-thingspeak)))
#+end_src

#+results:
: kc:list-connections
